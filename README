/*
 * Programming Assignment 1 – Trivial File Transfer Protocol
 *
 * Team:
 * Einar Örn Gissurarson <einarog05@ru.is>
 * Óskar Örn <oskart10@ru.is>
 * Peter Hostačný <peterh16@ru.is>
 */
 
There are only few functions in the program (excluding main() function):
 
1. void send_data_packet();
  - This is function that reads bunch of data from the file, compiles a data package and sends it to the client.
  - If the data package happens to be less than 512 bytes, it will close the file after sending the package.

2. void send_error_response(ErrorCode error_code);
  - This is function for creating an error message, based on the value assigned to "error_code". At the end of function, packet with error response in sent to the client and file is closed.
  
3. bool is_prefix(const char *prefix, const char *string);
  - returns true if string (the second parameter) contains prefix (the first parameter), otherwise returns false. 

4. void sig_handler(int signal_n);
  - This function was created for purposes of signal handling. Server is running in infinite loop, so the only way how to kill the application is by sending signal to a process. Our signal handler react only to signal SIGINT, other signals will probably kill our application without any addition reaction.
  
5. void convert_to_nvt_ascii(FILE *source, FILE *destination);
  - This function reads whole file pointed by first argument (FILE *source), then it converts all occurances of '\r' to "\r\0" and '\n' to '\r\n' and writes to the file pointed by second argument (FILE *destination). This is because of NVT end-of-line representation (netascii -> Telnet -> NVT)
  <<< citation: "An end-of-line is transmitted as the character sequence CR (carriage return) followed by LF (line feed). If it is desired to transmit an actual carriage return this is transmitted as a carriage return followed by a NUL (all bits zero) character." [http://www.hw-group.com/support/nvt/index_en.html] >>>
 

As mentioned before our tftp server runs in infinite loop in main() function.
After starting server these steps happen:
  - check number of arguments (printed usage if this is wrong)
  - start handling signal SIGINT (Ctrl-C)
  - read port number from arguments and create socket
  - bind socket to a specified port number and start listening on all network devices (addresses)
  - write path of shared directory to output
  - step into infinite loop and start waiting to client (blocking recvfrom())
  
Usage:
./tftpd <port> <shared_directory>

==================================================
Short description of what happens in infinite loop:

When the program receives a request from a client, it will read the opcode and enter a switch case, which handles the request based on aforementioned opcode.

In case Read Request is received (opcode 1), the program will check, if file is inside shared directory (sharing files outside of directory is forbidden and if client tries to use relative path to such a file he will receive FILE_NOT_FOUND error). Then it will attempt to open requested file, based on predetermined file path. If file is not found, the program will send error response to the client by calling send_error_response(FILE_NOT_FOUND). Otherwise, if file is found, it will assign the value "1" to block_code and call the send_data_packet() function.

Handling Write Requests (opcode 2) has not been implemented, as requested by the assignment. When a server sends a write request, the server will call send_error_response(ACCESS_VIOLATION).
Similarly, if client ever attempts to send a Data package (opcode 3), send_error_response(ILLEGAL_OPERATION) is called and error message is sent to the client.

When the server receives an Acknowledgment (opcode 4), it will compare the received block code to the last sent block code. If they are same, it means that the client is acknowledging the he received the last data package. The server will then increment the local block code and call the send_data_packet() function. If the block code differs, the server will attempt to send the last data package.

Finally, error messages (opcode 5) are handled by the server, by writing out the error message, check if there's an open file connection and close it.

